Airplane:

Get Unity:
https://unity3d.com/
Download og Installer
Registrer Visual Studio konto
(Velg Passord som er enkelt å huske)

Lag en mappe til Unity prosjekter:
For eksempel C:\koding\unity

Hent Oppstarts prosjektet fra Github:
github.com/PaulSolheim/Airplane
Clone or Download -> Download ZIP
Rename til Airplane.zip
Pakk ut ZIP-filen
Kopier Airplane mappa til mappa for Unity prosjekter

Start Unity:
Lag Unity profil hvis du ikke har fra før
Logg inn med din Unity profil
Klikk Open og finn Airplane mappa
(Mappa som har Asset som undermappe)
Prøv: 
Nedlastinger/Airplane/Airplane mappa
eventuellt
Nedlastinger/Airplane-master/Airplane-master

Gå gjennom oppsettet:
Assets struktur
Utviklings scenen
IndiePixel Flyet:
	Kontroll flater (roter, forklar pivotpunkt)
	Propeller (roter)
	Hjul (roter)

Reorganisere Assets:
gå til Airplane - Art - Objects
dra IndiePixel_AirPlanes mappa under Objects

Gjør flyet i scenen til en Prefab:
Dra IndiePixel_Plane fra hierarkiet til Prefabs mappa

Når du har fått opp prosjektet i Unity:
Åpne scenen som har flyet vårt:
I prosjektvinduet (nede til venste)
Gå til:
Assets
	Airplane
		Scenes
Åpne scenen som heter Airplane_Setup_Dev

La oss sette opp Colliders for flyet:
Klikk på IndiePixel_Airplane i hierarkiet
høyreklikk og legg til ny empty Gameobject
rename til Collison_GRP
Empty Gameobject 
rename til Body_Front_COL
add Capsule Collider
endre Direction til Z-axis
Tilpass Collider til Flykroppens front
(bruk edit collider ikonet)
Dupliser Collideren
Rename kopien til Body_Back_COL
flytt, juster og roter til det passer
lag ny empty gameobject
rename til L_Wing_COL
legg til box collider til en vinge
Juster til det passer
Lag en ny empty gameobject
rename til R_Wing_COL
legg til box collider til den andre vingen
Juster til det passer

HIT - 1.gang

Lag ny Empty GO
rename til Vertical_Fin_COL
legg til box collider
Juster til det passer
Lag ny Empty GO
rename til Horizontal_Fin_COL
legg til box collider
Juster til det passer

Legg til Rigidbody komponent til IndiePixel_Plane
(for å få wheel colliders til å justeres)
Se lecture 6 ca. 11 minutter

Lag ny empty GO
rename til Wheels_GRP
Under Wheels_GRP:
Lag ny empty GO
rename til L_Front_Wheel_COL
legg til wheel collider
(dra til under L_Wheel_GEO klikk reset for automatisk justering
så dra den tilbake)
sett radius til 0.32
Ctrl-D for å lage en kopi
rename til R_Front_Wheel_COL
(dra til under R_Wheel_GEO klikk reset for automatisk justering
så dra den tilbake)
sett radius til 0.32
Ctrl-D for å lage en kopi
rename til Back_Wheel_COL
(dra til under Back_Wheel_GEO klikk reset for automatisk justering
så dra den tilbake)
sett radius til 0.1

Ctrl-S for å lagre scenen.

Designe koden:
https://www.draw.io/
Open Existing Diagram
Folders - Kodeklubben Skedsmo-Instruktørmappa
AirplanePhysics_Code_design

Hver boks skal bli til et skript
Gå gjennom de forskjellige boksene, kort forklaring

Next up - Airplane Inputs
build a Base Input class
capture Keyboard Input
capture Xbox Input
Create a simple Editor to display Input data

Se på draw.io diagrammet:
Airplane_Inputs

Lag ny mappe under code/scripts: Input
Create C# Script: IP_BaseAirplane_Input
Create C# Script: IP_XBoxAirplane_Input
Lag undermappe: Editor
hvor vi lager 2 nye scripts:
Create C# Script: IP_BaseAirplaneInput_Editor
Create C# Script: IP_XBoxAirplaneInput_Editor

Dobbeltklikk på IP_BaseAirplane_Input

La oss legge inn variabler vi trenger:

namespace IndiePixel
{
...
}

Legg inn:
public float pitch = 0f;
#region Variables
public float roll = 0f;
public float yaw = 0f;
public throttle = 0f;
public int flaps = 0;
public float brake = 0f;
#endregion

#region Builtin Methods
void Start()
{}
void Update()
{}
#endregion

Ctrl-S for å lagre - Gå til Unity
Aktiver IndiePixel_Plane i Hierarkiet
dra IP_BaseAirplane_Input over IndiePixel_Plane og slipp
Vis at alle variablene er mulige å endre utenfra

Gå tilbake til Visual Studio
endre variablene fra public til protected
Ctl-S - Gå til Unity

C# Properties:
Legg inn
#region Properties
public float Pitch
{
	get{return pitch}
}

public float Roll
{
	get{return roll}
}

public float Yaw
{
	get{return yaw}
}

public float Throttle
{
	get{return throttle}
}

public float Flaps
{
	get{return flaps}
}

public float Brake
{
	get{return brake}
}
#endregion

Ctrl-S for å Lagre

Methods og Virtual Methods
Legg inn:
#region Custom Methods
void HandleInput()
{
	Debug.Log("Handling Inputs");
}
#endregion

og
void Update()
{
	HandleInput();
}

Ctrl-S - Gå til Unity - Run - Se i konsollet
VS - endre til :
void HandleInput()
{
	pitch = Input.GetAxis("Vertical");
	roll = Input.GetAxis("Horizontal");
	
	Debug.Log("Pitch: " + pitch + " - " + "Roll: " + roll);
}

Ctrl-S - Unity - Run (Trykk wsad-tastene)

Fix Bouncy Plane 
Grunn: wheel colliders med mye spring og RigidBody på 1 Kg

Fix: 
RigidBody mass = 800
Test - Fix bakover rulling
Drag = 1

Unity InputManager
Edit - Project Settings - Input
Horizontal - fjern left og right (piltaster)
Vertical - fjern up og down (piltaster)

For å legge til yaw:
endre size til 19
gå til den siste (som er ny)
name: Yaw
(fjern taster som ligger fra forrige)
Alt.Negative Button: left
Alt.Positive Button: right
Sett samme Gravity, Dead og Sensitivity som Horizontal
(3, 0.001, 3 hos meg)

For å legge til throttle:
endre size til 20
gå til den siste (som er ny)
name: Throttle
(fjern taster som ligger fra forrige)
Alt.Negative Button: down
Alt.Positive Button: up

HIT - 2.gang

Fix egenskaper for Inputs:
Edit - Project Settings - Input
For Yaw og Throttle:
Sett samme Gravity, Dead og Sensitivity som Horizontal
(3, 0.001, 3 hos meg)

VS - // ut Debug.Log linja

Legg til i HandleInput()
	yaw = Input.GetAxis("Yaw");
	throttle = Input.GetAxis("Throttle");
	brake = Input.GetKey(KeyCode.Space)? 1f : 0f;

To måter å se verdiene på:
1. Gjør yaw, throttle og brake public midlertidig for å teste Input 
2. Velg Debug modus i Inspektøren

Ctrl-S - Unity Run (piltastene og space)
Sjekk om det fungerer

VS - sett tilbake til protected hvis du brukte 1.
Ctrl-S for å lagre

Da er det bare Flaps som mangler:
Legg til i HandleInput()

	// Process Flaps input
	if(Input.GetKeyDown(KeyCode.F))
	{
		flaps += 1;
	}
	if(Input.GetKeyDown(KeyCode.G))
	{
		flaps -= 1;
	}
	
	flaps = Mathf.Clamp(flaps, 0, 3);

HIT - 3.Gang

KLARGJORT - Til de neste gangene:

Ny public int maxFlapIncrement = 2;
og ny public KeyCode brakeKey = KeyCode.Space;
+ endret i koden
Ctrl-S og teste i Unity

La oss lage en Editor som viser Inputverdiene:
Åpne Scripts - Input - Editor:
IP_BaseAirplaneInput_Editor

Legg til namespace KodeKlubb
Legg til using UnityEditor;

Endre MonoBehavior til Editor

På linja over public class:
[CustomEditor(typeof(IP_BaseAirplane_Input))]
[CanEditMultipleObjects]

Fjern Start() og Update() metodene

Legg inn koden:

  #region Variables
  private IP_BaseAirplane_Input targetInput;
  #endregion

  #region Builtin Methods
  private void OnEnable()
  {
      targetInput = (IP_BaseAirplane_Input)target;
  }

  public override void OnInspectorGUI()
  {
      base.OnInspectorGUI();

      // Custom Editor Code
      string debugInfo = "";
      debugInfo += "Pitch = " + targetInput.Pitch + "\n";
      debugInfo += "Roll = " + targetInput.Roll + "\n";
      debugInfo += "Yaw = " + targetInput.Yaw + "\n";
      debugInfo += "Throttle = " + targetInput.Throttle + "\n";
      debugInfo += "Brake = " + targetInput.Brake + "\n";
      debugInfo += "Flaps = " + targetInput.Flaps + "\n";

      GUILayout.Space(20);
      EditorGUILayout.TextArea(debugInfo, GUILayout.Height(100));
      GUILayout.Space(20);

      Repaint();
  }
  #endregion

Ctrl-S og teste i Unity

Lagt til Xbox Input Skript og Editor
Lagt til i Inputmanager for å støtte Xbox:
X_RH_Stick
X_RV_Stick
X_L_Bumper
X_R_Bumper

Dokumentasjon av Xbox360 kontroller:
http://wiki.unity3d.com/index.php/Xbox360Controller

Har Forandret i koden så keyboard og joystick kan brukes samtidig.

Har laget Airplane Controller skript:
IP_BaseRigidBody_Controller
og
IP_Airplane_Controller

Beregner RigidBody sin masse ved å konvertere fra Pound til Kilo.

Lagt til CenterOfGravity (COG) på flyet.

4. Gang

La oss lage en meny som gjør det enklere å lage nye fly.
Åpne skriptet IP_Airplane_Menus som ligger i mappa Code/Editors

Legg til koden:

[MenuItem("Airplane Tools/Create New Airplane")]
public static void CreateNewAirplane()
{
    GameObject curSelected = Selection.activeGameObject;
    if (curSelected)
    {
        IP_Airplane_Controller curController = curSelected.AddComponent<IP_Airplane_Controller>();
        GameObject curCOG = new GameObject("COG");
        curCOG.transform.SetParent(curSelected.transform);

        curController.centerOfGravity = curCOG.transform;
    }
}

Ctrl-S - gå til Unity
Lag et nytt Empty Gameobject på toppnivå i scenen
rename til f.eks. "New_Airplane"
velg menyen "Airplane Tools" - "Create New Airplane"
Sjekk hva som er laget under "New_Airplane"

Kult! - vi skal utvide denne funksjonen litt senere i kurset.

La oss få igang Motorene så vi snart kan fly!

1. kjapt om de 4. kreftene for å fly
2. påføre kraft til en Rigidbody
3. animering av hjul
4. animasjonskurver for å simulere kraft

Jeg har lagt inn:
IP_Airplane_Engine og Airplane_Fuel
IP_Airplane_Propeller og IP_Airplane_Wheel

La oss legge til kontroll av motor og hjul
Åpne Controller/IP_Airplane_Controller

Legg til i region Variables:

[Header("Engines")]
public List<IP_Airplane_Engine> engines = new List<IP_Airplane_Engine>();

[Header("Wheels")]
public List<IP_Airplane_Wheel> wheels = new List<IP_Airplane_Wheel>();

Ctrl-S Gå til Unity

Klikk på IndiePixel_Airplane i Hierarkiet.
Dra IP_Xbox Airplane_Input (Script)
ned til:
Base Airplane Properties
Input egenskapen.

Lag en Empty Gameobject under IndiePixel_Airplane
rename til Engine
Add Component IP_Airplane_Engine

Gå til de 3 hjulene under Collision_GRP
For hvert hjul: Legg til IP_Airplane_Wheel skriptet

For hvert hjul:
Legg til riktig hjul under "Wheel Graphic",
dra fra "Wheel_GRP".

Legg til "Engine" og de 3 hjulene under Airplane Controller egenskapene.

Åpne Controller/IP_Airplane_Controller

Finn Start() funksjonen og legg til:

if (wheels != null)
{
    if (wheels.Count > 0)
    {
        foreach(IP_Airplane_Wheel wheel in wheels)
        {
            wheel.InitWheel();
        }
    }
}

Rename HandleSteering funksjonen til HandleWheel.

Finn HandleWheel() funksjonen og legg inn:

foreach(IP_Airplane_Wheel wheel in wheels)
{
    wheel.HandleWheel(input);
}

Finn HandleEngines() funksjonen og legg inn:

if (engines != null)
{
    if (engines.Count > 0)
    {
        foreach(IP_Airplane_Engine engine in engines)
        {
            rb.AddForce(engine.CalculateForce(input.StickyThrottle));
        }
    }
}

Ctrl-S gå til Unity - Test Spillet - Beveger flyet seg hvis du øker Throttle?

Max Force på Engine komponenten er for liten.
Endre Max Force til 5000

Du kan også endre på "Power Curve" egenskapen på Engine
test litt forskjellige kurver og finn en som du er fornøyd med.

Test Spillet - Beveger flyet seg hvis du øker Throttle?

HIT - 4.Gang

Endringer som jeg har lagt inn:
Lagt til Propellers skriptet på Propellers_GEO
Animert Propellers ved bruk av blurred materials.


5. Gang

Forrige gang fikk vi/noen flyet til å gå fremover ved å legge til en kraft
til flyets "Rigidbody", for å få det i lufta trenger vi å lage løft.

Slide 4. krefter
Slide Vingeprofil
Slide Angrepsvinkel

La oss beregne løft i koden.
Åpne IP_Airplane_Characteristics skriptet
Finn CalculateLift() funksjonen

Legg inn:

  angleOfAttack = Vector3.Dot(rb.velocity.normalized, transform.forward);
  angleOfAttack *= angleOfAttack;

  Vector3 liftDir = transform.up;
  float liftPower = liftCurve.Evaluate(normalizeMPH) * maxLiftPower;

  float finalLiftPower = flapLiftPower * input.NormalizedFlaps;

  Vector3 finalLiftForce = liftDir * (liftPower + finalLiftPower) * angleOfAttack;
  rb.AddForce(finalLiftForce);

Ctrl-S for å lagre - til Unity - Test spillet, flyr flyet om du gir full gass?
Synes du flyet tar av ved passe hastighet? 
Prøv å justere på noen av egenskapene og test ut konsekvenser.

Tid til å justere og prøve oss frem ...

Hvordan gikk du frem når du justerte på egenskapene?
en justering - en test - en ny justering - en test
noen justeringer - en test - noen flere justeringer - en test
Hva tror du er en god måte å teste på?

La oss legge inn styring med hjul når vi beveger oss på bakken.
Åpne IP_Airplane_Wheel skriptet (Airplane/Code/Scripts/Wheels mappa)
Finn HandleWheel() funksjonen
Finn kommentaren //Handle steering of the wheel
legg inn på linja under kommentaren:

if(isSteering)
{
    finalSteerAngle = Mathf.Lerp(finalSteerAngle, -input.Yaw * steerAngle, Time.deltaTime * steerSmoothSpeed);
    WheelCol.steerAngle = finalSteerAngle;
}

Ctrl-S - Unity - Finn Back_Wheel_COL i hierarkiet under Collision_GRP
Aktiver egenskapen "Is Steering" på bakhjulet. 

Test Spillet - Kan du styre med bakhjulet på bakken?

Skal vi leke oss litt med å lage et terreng?
Eller skal vi kode mer på flyet?

La oss legge til lyd:

Aktiver IndiePixel_Airplane i Hierarkiet
Høyreklikk - Create Empty
Rename til Audio_GRP
Legg til 2 Empty Gameobjects under denne:
Idle_Audio
FullThrottle_Audio
Marker begge og trykk Add Component knappen
Skriv Audio og velg AudioSource
Naviger til Assets/Airplane/Art/Audio/Engine mappa
Dra hver lydfil til riktig Gameobject
(Idle og FullThrottle)

Naviger til Assets/Code/Scripts/Audio mappa
Høyreklikk - Create new C# Script
Gi det navnet IP_Airplane_Audio
Legg skriptet til på Audio_GRP komponenten

Dobbeltklikk på Skriptet for å åpne det i Visual Studio
Legg til namespace, regioner, noen variabler 
og HandleAudio() funksjon så skriptet blir:

namespace KodeKlubb
{
    public class IP_Airplane_Audio : MonoBehaviour 
    {
        #region Variables
        [Header("Airplane Audio Properties")]
        public IP_BaseAirplane_Input  input;
        public AudioSource idleSource;
        public AudioSource fullThrottleSource;
        public float maxPitchValue = 1.2f;
        #endregion

        #region Builtin Methods
    	  // Use this for initialization
        void Start () 
        {
        
        }
    	
        // Update is called once per frame
        void Update () 
        {
            if(input)
            {
                HandleAudio();
            }        
        }
        #endregion

        #region Custom Methods
        protected virtual void HandleAudio()
        {
        
        }        
        #endregion
    }
}

Ctrl-S for å lagre - Unity
Sett Loop egenskapen på begge AudioSource til Aktivert (huket av)

Test Spillet - Får du høy lyd (full gass)?
La oss justere lydnivået i kode avhengig av hvor mye Throttle vi har.
Gå til Skriptet i Visual Studio

Endre Start() funksjonen så vi alltid starter med null i volume:

	void Start () 
    {
        if(fullThrottleSource)
        {
            fullThrottleSource.volume = 0f;
        }
	}

Legg til 2 private variabler i Variables regionen:

  private float finalVolumeValue;
  private float finalPitchValue;

Skriv kode i HandleAudio() funksjonen så den blir:

  protected virtual void HandleAudio()
  {
      finalVolumeValue = Mathf.Lerp(0f, 1f, input.StickyThrottle);
      finalPitchValue = Mathf.Lerp(1f, maxPitchValue, input.StickyThrottle);

      if(fullThrottleSource)
      {
          fullThrottleSource.volume = finalVolumeValue;
          fullThrottleSource.pitch = finalPitchValue;
      }
  }

Ctrl-S for å lagre - til Unity

La oss konfigurere skriptet som ligger på Audio_GRP komponenten
Aktiver Audio_GRP i hierarkiet
Dra IndiePixel_Airplane til "Input" egenskapen
Dra Idle_Audio til "Idle Source" egenskapen
Dra FullThrottle_Audio til "Full Throttle Source" egenskapen

Velg IndiePixel_Airplane - Trykk Apply knappen i inspektøren
for å legge alle endringene vi har gjort i flyet i scenen til Prefaben i Assets.

Test Spillet - Får du høyere/lavere lyd når du gir mer/mindre gass?
Du kan prøve å justere opp "Max Pitch Value" litt i inspektøren
og teste ut i spillet til du finner en verdi som du synes er passe.

6. Gang

Neste i koding er Instrumenter.

Jeg har lagt inn følgende skript:
IP_AirplaneUI_Controller
IAirplaneUI
IP_Airplane_Airspeed
IP_Airplane_Altimeter
IP_Airplane_FlapLever
IP_Airplane_FuelGauge
IP_Airplane_Tachometer
IP_Airplane_ThrottleLever
IP_Airplane_Collisions
IP_Airplane_EngineCutoff (tastene O og P)

Jeg har også lagret Level_Manager som Prefab
og satt opp det meste på F4U_Airplane som en prefab.

Jeg har satt opp UI for:
Altimeter
Tachometer
FuelGauge
ThrottleLever
FlapLever

La oss sette opp UI for AirSpeed sammen:

Switch til 2D hvis det ikke allerede er sånn (trykk 2)

Aktiver Airplane_HUD i hierarkiet (dobbeltklikk)
(Level_Manager/UI_GRP/Canvas/Airplane_HUD)
Legg til "Empty Gameobject"
Rename til "Airspeed"
Add Image komponent
Dra "airspeed-bg" fra Airplane/Art/Textures/UI/PC mappa til Image Source
Aktiver "preserve aspect ratio" og "Set native size"
Resize og flytt Airspeed
Høyreklikk Airspeed i hierarkiet og Add UI/Image
Rename til "Pointer_Image"
Dra "airspeed-pointer" fra Airplane/Art/Textures/UI/PC mappa til Image Source
Aktiver "preserve aspect ratio" og "Set native size"
Resize og flytt Pointer_Image samt sett "Pivot Point" i sentrum (bruk T)
Add "Knob_Image" under Airspeed, bruk "altimeter-center-knob", resize og sett i sentrum.

Aktiver "Airspeed" i hierarkiet
Legg til skriptet Airplane/Code/Scripts/UI/Instruments/IP_Airplane_Airspeed
Konfigurer public variablene for skriptet:
XX_Airplane og Pointer

Kort forklaring av IP_Airplane_Airspeed skriptet.

Test Spillet - Fungerer Airspeed indikatoren?

Må Fikses - Bytte Airplane:
Level Manager:
		Altimeter: Airplane
		Tachometer: Engine
		Fuel_Gauge: Engine (Fuel)
		Throttle_Lever: Airplane (Input)
		Flaps_Lever: Airplane (Input)
Track Manager:
		Airplane Controller: (Airplane)

Har fikset - Create Airplane
Flere ting på plass i skriptet:
		ControlSurfaces_GEO (Empty GameObjects)
		Propellers_GEO
		Wheels_GEO
		Collisions_GRP (Empty GameObjects)
		Control_Surfaces_GRP (GameObjects with IP_Airplane_ControlSurface)
		Audio_GRP med skript (Idle og FullThrottle with AudioSource)
		Cockpit_Camera (Camera)
		Camera_Controller med skript

Neste i Terreng:
	- Hvordan bruke CustomTerrain som lager terreng med kode.
	- Hvordan lage en liten ørkenby med Polylised Pack.
	- Lage en liten by i AssetForge og importere i Unity.
	- Test ut å lage andre fly: F4U_Corsair og Military Aircraft Pack.
	- Teste ut Cascades og TerraPainter.

